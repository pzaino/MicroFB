/*
 * This file is part of:
 *      MicroFB, a minimal framebuffer library for RISC OS
 *
 * Description:
 *      This project aims to provide a simple and efficient way to manage
 *      the framebuffer on RISC OS using C++11. It abstracts the direct
 *      interaction with the GraphicsV API, offering a higher-level
 *      interface for drawing operations and framebuffer manipulation.
 *
 * Author:
 *     Paolo Fabio Zaino, all rights reserved.
 * Distributed under License:
 *      CDDL v1.1 (Common Development and Distribution License Version
 *      1.1) The use of this project is subject to the terms of the
 *      CDDL v1.1. This project can be used and distributed according
 *      to the terms of this license. For details on the CDDL v1.1,
 *      please refer to the official license documentation.
 */

#include <memory> // For std::shared_ptr

// Include MicroFB libraries
#include "common.h"
#if GCC_VERSION < 50000
// Include my own C++ STDLib extras for compatibility with older GCC versions
//#include "stdlib_extras.h"
#endif
#include "mem_manager.h"
#include "layer.h"

// Constructor implementation
Layer::Layer(pixel_t width, pixel_t height, std::shared_ptr<RenderStrategy> strategy, std::shared_ptr<MemoryManager> currMemoryManager)
    : currentRenderStrategy(strategy), opacity(1.0f), visible(true), width(width), height(height)  {

    if (currentMemoryManager == nullptr) {
        currentMemoryManager = currMemoryManager;
    }

    // Initialize pixel buffer with default color (0)
    pixels = static_cast<color_t*>(currentMemoryManager->allocate(width * height * sizeof(color_t)));

}

// Destructor implementation
Layer::~Layer() {
    // Not much for now
}

// Set the render strategy
void Layer::setRenderStrategy(std::shared_ptr<RenderStrategy> strategy) {
    currentRenderStrategy = strategy; // Set the render strategy
}

// Set the memory manager
void Layer::setMemoryManager(std::shared_ptr<MemoryManager> manager) {
    currentMemoryManager = manager; // Set the memory manager
}

// Clear the layer with a specific color
void Layer::clear(color_t color) {
   currentRenderStrategy->clear(*this, color); // Use the render strategy to clear the layer
}

// Direct pixel manipulation
void Layer::setPixel(pixel_t x, pixel_t y, color_t color) {
    currentRenderStrategy->setPixel(*this, x, y, color); // Use the render strategy to set the pixel
}

// Draw a line
void Layer::drawLine(pixel_t x1, pixel_t y1, pixel_t x2, pixel_t y2, color_t color) {
    currentRenderStrategy->drawLine(*this, x1, y1, x2, y2, color); // Use the render strategy to draw the line
}

// Draw a rectangle
void Layer::drawRect(pixel_t x, pixel_t y, pixel_t w, pixel_t h, color_t color) {
    currentRenderStrategy->drawRect(*this, x, y, w, h, color); // Use the render strategy to draw the rectangle
}

// Fill a rectangle
void Layer::fillRect(pixel_t x, pixel_t y, pixel_t w, pixel_t h, color_t color) {
    currentRenderStrategy->fillRect(*this, x, y, w, h, color); // Use the render strategy to fill the rectangle
}

// Draw a circle
void Layer::drawCircle(pixel_t x, pixel_t y, pixel_t r, color_t color) {
    currentRenderStrategy->drawCircle(*this, x, y, r, color); // Use the render strategy to draw the circle
}

// Fill a circle
void Layer::fillCircle(pixel_t x, pixel_t y, pixel_t r, color_t color) {
    currentRenderStrategy->fillCircle(*this, x, y, r, color); // Use the render strategy to fill the circle
}

// Draw an ellipse
void Layer::drawEllipse(pixel_t x, pixel_t y, pixel_t rx, pixel_t ry, color_t color) {
    currentRenderStrategy->drawEllipse(*this, x, y, rx, ry, color); // Use the render strategy to draw the ellipse
}

// Fill an ellipse
void Layer::fillEllipse(pixel_t x, pixel_t y, pixel_t rx, pixel_t ry, color_t color) {
    currentRenderStrategy->fillEllipse(*this, x, y, rx, ry, color); // Use the render strategy to fill the ellipse
}

// Draw a polygon
void Layer::drawPolygon(const std::vector<pixel_t>& points, color_t color) {
    currentRenderStrategy->drawPolygon(*this, points, color); // Use the render strategy to draw the polygon
}

// Fill a polygon
void Layer::fillPolygon(const std::vector<pixel_t>& points, color_t color) {
    currentRenderStrategy->fillPolygon(*this, points, color); // Use the render strategy to fill the polygon
}

// Draw text
void Layer::drawText(pixel_t x, pixel_t y, const char* text, color_t color) {
    currentRenderStrategy->drawText(*this, x, y, text, color); // Use the render strategy to draw the text
}

// Draw an image
void Layer::drawImage(pixel_t x, pixel_t y, const Layer& image) {
    currentRenderStrategy->drawImage(*this, x, y, image); // Use the render strategy to draw the image
}
