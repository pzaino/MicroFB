/*
 * This file is part of: 
 *      MicroFB, a minimal framebuffer library for RISC OS
 *
 * Description: 
 *      This project aims to provide a simple and efficient way to manage
 *      the framebuffer on RISC OS using C++11. It abstracts the direct 
 *      interaction with the GraphicsV API, offering a higher-level 
 *      interface for drawing operations and framebuffer manipulation.
 *
 * Author:
 *     Paolo Fabio Zaino, all rights reserved.
 * Distributed under License: 
 *      CDDL v1.1 (Common Development and Distribution License Version 
 *      1.1) The use of this project is subject to the terms of the 
 *      CDDL v1.1. This project can be used and distributed according 
 *      to the terms of this license. For details on the CDDL v1.1, 
 *      please refer to the official license documentation.
 */

#include "fb.hpp"
#include "layer.hpp" // Ensure this is included if not already included in fb.hpp

// Constructor
FrameBuffer::FrameBuffer(unsigned int width, unsigned int height, std::shared_ptr<RenderStrategy> strategy)
    : width(width), height(height), renderStrategy(strategy) {}

// Add a layer to the framebuffer
void FrameBuffer::addLayer(const Layer& layer) {
    layers.push_back(layer);
    // Assuming Layer copy constructor or assignment operator handles the strategy correctly
}

// Remove a layer from the framebuffer by index
void FrameBuffer::removeLayer(size_t index) {
    if (index < layers.size()) {
        layers.erase(layers.begin() + index);
    }
}

// Accessor for layer by index
Layer& FrameBuffer::getLayer(size_t index) {
    // Simple bounds checking, throw std::out_of_range if index is invalid
    if (index >= layers.size()) {
        throw std::out_of_range("Layer index is out of range.");
    }
    return layers[index];
}

// Set the render strategy for the framebuffer and all its layers
void FrameBuffer::setRenderStrategy(std::shared_ptr<RenderStrategy> strategy) {
    renderStrategy = strategy;
    // Update the render strategy for all existing layers
    for (auto& layer : layers) {
        layer.setRenderStrategy(renderStrategy);
    }
}

// Placeholder for the actual implementation of merging all layers
void FrameBuffer::mergeLayers() {
    // Implementation depends on how you want to combine the layers
    // This could involve blending pixels from each layer based on their opacity,
    // and visibility, or simply stacking them in order.
    // For simplicity, we're not providing a specific implementation here.
}
