/*
 * This file is part of: 
 *      MicroFB, a minimal framebuffer library for RISC OS
 *
 * Description: 
 *      This project aims to provide a simple and efficient way to manage
 *      the framebuffer on RISC OS using C++11. It abstracts the direct 
 *      interaction with the GraphicsV API, offering a higher-level 
 *      interface for drawing operations and framebuffer manipulation.
 *
 * Author:
 *     Paolo Fabio Zaino, all rights reserved.
 * Distributed under License: 
 *      CDDL v1.1 (Common Development and Distribution License Version 
 *      1.1) The use of this project is subject to the terms of the 
 *      CDDL v1.1. This project can be used and distributed according 
 *      to the terms of this license. For details on the CDDL v1.1, 
 *      please refer to the official license documentation.
 */

#ifndef FB_HPP
#define FB_HPP

#include <vector>
#include <memory> // For std::shared_ptr

#include "layer.hpp" 
#include "render_strategy.hpp" 

class FrameBuffer {
  private:
    std::vector<Layer> layers; // Collection of layers
    std::shared_ptr<RenderStrategy> renderStrategy; // Shared rendering strategy
    unsigned int width, height; // Dimensions of the framebuffer

  public:
    // Constructor that initializes the framebuffer with dimensions and a rendering strategy
    FrameBuffer(unsigned int width, unsigned int height, std::shared_ptr<RenderStrategy> strategy)

    // Add a layer to the framebuffer
    void addLayer(const Layer& layer);

    // Remove a layer from the framebuffer by index
    void removeLayer(size_t index);

    // Accessor for layer by index
    Layer& getLayer(size_t index);

    // Set the render strategy for the framebuffer and all its layers
    void setRenderStrategy(std::shared_ptr<RenderStrategy> strategy);

    // Method to merge all layers - Placeholder for actual implementation
    void mergeLayers();

};

#endif // FB_HPP
